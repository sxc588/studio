<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.1.xsd
    http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd">

	<!-- 引入配置文件 -->
	<bean id="annotationPropertyConfigurerQuertz"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="order" value="1" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:prop/druid.properties</value>
			</list>
		</property>
	</bean>

	<!-- https://blog.csdn.net/guowujun321/article/details/79315328 -->
	<!-- 数据源 -->
	<bean id="dataSourceQuartz" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${url}" />
		<property name="username" value="${uname}" />
		<property name="password" value="${pword}" />
		<property name="filters" value="${filters}" />
		<property name="maxActive" value="${maxActive}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxWait" value="${maxWait}" />
		<property name="timeBetweenEvictionRunsMillis"
			value="${timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${maxPoolPreparedStatementPerConnectionSize}" />

		<!-- 超过时间限制是否回收 -->
		<property name="removeAbandoned" value="true" />
		<!-- 超时时间；单位为秒。180秒=3分钟 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 关闭abanded连接时输出错误日志 此配置项会影响性能，只在排查的时候打开。系统运行时最好关闭。 -->
		<property name="logAbandoned" value="true" />
	</bean>

	<bean id="jobFactoryBean"
		class="com.github.support.quartz.service.SpringScheduleJobFactory" />
	<!-- 配置线程池 -->
	<bean name="executor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="15" />
		<property name="maxPoolSize" value="125" />
		<property name="queueCapacity" value="300" />
	</bean>
	<bean name="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceQuartz" />
	</bean>


	<!-- 配置quartz调度器 -->
	<bean id="scheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="dataSource" ref="dataSourceQuartz" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="jobFactory" ref="jobFactoryBean"></property>
		<!--可选，QuartzScheduler 启动时更新己存在的Job，这样就不用每次修改targetObject后删除qrtz_job_details表对应记录了 -->
		<property name="overwriteExistingJobs" value="true" />
		<!--必须的，QuartzScheduler 延时启动，应用启动完后 QuartzScheduler 再启动 -->
		<property name="startupDelay" value="3" />
		<!-- 设置自动启动 -->
		<property name="autoStartup" value="true" />
		<!-- 把spring上下 文以key/value的方式存放在了quartz的上下文中了 -->
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<!-- scheduler的名称 -->
		<property name="schedulerName" value="ClusterScheduler" />
		<property name="configLocation" value="classpath:prop/quartz.properties" />
		<property name="quartzProperties">
			<props>
				<!-- <prop key="org.quartz.scheduler.instanceName">ClusterScheduler</prop> -->
				<!-- <prop key="org.quartz.scheduler.instanceId">AUTO</prop> -->
				<!-- 线程池配置 -->
				<!-- <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop> -->
				<!-- <prop key="org.quartz.threadPool.threadCount">20</prop> -->
				<!-- <prop key="org.quartz.threadPool.threadPriority">5</prop> -->
				<!-- JobStore 配置 -->
				<!-- <prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop> -->
				<!-- 集群配置 -->
				<prop key="org.quartz.jobStore.isClustered">true</prop>
				<prop key="org.quartz.jobStore.clusterCheckinInterval">15000</prop>
				<prop key="org.quartz.jobStore.maxMisfiresToHandleAtATime">1</prop>
				<!-- <prop key="org.quartz.jobStore.misfireThreshold">120000</prop> -->
				<!-- <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop> -->
			</props>
		</property>
	</bean>
</beans>